Task 2: SQL Queries using JDBC Create a table 'User' with a following schema 'User ID' and
'Password' stored as hash format (note you have research on how to generate hash from a
string), accept "User ID" and "Password" as input and check in the table if they match to
confirm whether user access is allowed or not



package com.Day26;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.sql.*;
public class UserAuthentication {
private static final String url = "jdbc:mysql://localhost:3306/wipro_test";
private static final String username = "root";
private static final String password = "rps@2345";
public static void main(String[] args) {
try {
// Load the MySQL JDBC driver
Class.forName("com.mysql.cj.jdbc.Driver");
// Establish the connection
Connection connection = DriverManager.getConnection(url, username, password);
// Create the 'User' table if it doesn't exist
createTable(connection);
// Accept user input for User ID and Password
String userId = "user123"; // Example user ID
String plainPassword = "password123"; // Example password
String hashedPassword = hashPassword(plainPassword); // Hash the password
// Check if the provided User ID and hashed password match any entry in the 'User'table
boolean isAuthenticated = authenticateUser(connection, userId, hashedPassword);
if (isAuthenticated) {
System.out.println("Access granted for User ID: " + userId);
} else {
System.out.println("Access denied for User ID: " + userId);
}
// Close the connection
connection.close();
} catch (ClassNotFoundException e) {
System.out.println("MySQL JDBC driver not found");
e.printStackTrace();
} catch (SQLException e) {
System.out.println("Connection failed");
e.printStackTrace();
}
}
// Method to create the 'User' table
private static void createTable(Connection connection) throws SQLException {
String createTableSQL = "CREATE TABLE IF NOT EXISTS User2 (" +
"id INT AUTO_INCREMENT PRIMARY KEY," +
"userId VARCHAR(50) UNIQUE," +
"passwordHash VARCHAR(64)" + // Storing hashed passwords
")";
Statement statement = connection.createStatement();
statement.execute(createTableSQL);
statement.close();
}
// Method to hash the password using SHA-256 algorithm
private static String hashPassword(String plainPassword) {
try {
MessageDigest md = MessageDigest.getInstance("SHA-256");
byte[] hashedBytes = md.digest(plainPassword.getBytes());
// Convert byte array to hexadecimal string
StringBuilder sb = new StringBuilder();
for (byte b : hashedBytes) {
sb.append(String.format("%02x", b));
}
return sb.toString();
} catch (NoSuchAlgorithmException e) {
e.printStackTrace();
return null;
}
}
// Method to authenticate user
private static boolean authenticateUser(Connection connection, String userId, String
hashedPassword) throws SQLException {
String query = "SELECT * FROM User2 WHERE userId = ? AND passwordHash = ?";
PreparedStatement preparedStatement = connection.prepareStatement(query);
preparedStatement.setString(1, userId);
preparedStatement.setString(2, hashedPassword);
ResultSet resultSet = preparedStatement.executeQuery();
boolean isAuthenticated = resultSet.next();
resultSet.close();
preparedStatement.close();
return isAuthenticated;
}
}